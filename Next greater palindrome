Next greater palindrome interviewbit

public class Solution {

    public String solve(String A) 
    {
    
        if (isPalindrome(A))
        {
            A = add1(A);
            if (isPalindrome(A)) 
            return A;
        }

        int n = A.length();
        StringBuilder result = new StringBuilder();

        if ((n & 1) == 1)
         {
            result.append(handleOdd(A));
        } else {
            result.append(handleEven(A));
        }

        return result.toString();
    }

  
    public boolean isPalindrome(String a)
     {
        return a.equals(new StringBuilder(a).reverse().toString());
    }

   

    public String add1(String x) 
    {
    char[] result = new char[x.length() + 1];
    int carry = 1;
    int index = result.length - 1;

    for (int i = x.length() - 1; i >= 0; i--) {
        int sum = Character.getNumericValue(x.charAt(i)) + carry;
        result[index--] = (char) ('0' + sum % 10);
        carry = sum / 10;
    }

    if (carry != 0) result[0] = (char) ('0' + carry);

    return new String(result).trim();
    }

     public int compare(String left, String right) 
     {
        for (int i = 0; i < left.length(); i++) {
            char l = left.charAt(i);
            char r = right.charAt(i);
            if (l > r) return 1;
            else if (l < r) return -1;
        }
        return 0;
    }

    public String handleOdd(String a) {
        int n = a.length();
        int mid = n / 2;
        String left = a.substring(0, mid);
        String right = a.substring(mid + 1);
        StringBuilder result = new StringBuilder();

        if (compare(new StringBuilder(left).reverse().toString(), right) == 1) 
        {
            result.append(left).append(a.charAt(mid)).append(new StringBuilder(left).reverse());
        } 
        else {
            left = left + a.charAt(mid);
            left = add1(left);

            result.append(left).append(new StringBuilder(left).reverse().substring(1));
        }

        return result.toString();
    }

    public String handleEven(String a) {
        int n = a.length();
        int mid = n / 2;
        String left = a.substring(0, mid);
        String right = a.substring(mid);
        StringBuilder result = new StringBuilder();

        if (compare(new StringBuilder(left).reverse().toString(), right) == -1) 
        {
            left = add1(left);
            result.append(left).append(new StringBuilder(left).reverse());
        } else {
            result.append(left).append(new StringBuilder(left).reverse());
        }

        return result.toString();
    }
}
tc:o(n)
sc:o(n)
