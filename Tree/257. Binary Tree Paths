/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    void buildPaths(TreeNode node,String path,List<String>res)
    {
        if(node==null) return ;

        if(path.isEmpty())
        {
            path=""+node.val;
        }
         else 
         {
            path = path + "->" + node.val;
        }
        if (node.left == null && node.right == null)
        {
            res.add(path);
            return;
        }
        buildPaths(node.left, path, res);
        buildPaths(node.right, path, res);
         
    }



    public List<String> binaryTreePaths(TreeNode root) {
        List<String>alist=new ArrayList<>();
        if(root==null) return alist;
        buildPaths(root,"",alist);
        return alist;
    }
}
