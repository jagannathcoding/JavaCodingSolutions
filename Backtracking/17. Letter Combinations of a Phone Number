17. Letter Combinations of a Phone Number

https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/

Medium
Topics
Company Tags   : Microsoft, Meta, Epic Systems, Amazon, Flipkart

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9']

/*
Each digit can be presented at most by 4 letters. On each iteration we go over all 4 of them. And we do this N (the number of digits) time. 
The complexity would be at most O(4^N)
But we you still have to traverse the entire string and do the same amount of operations, so it's O(n â€¢ 4^N).
*/


class Solution {
    List<String>result=new ArrayList<>();

    void solve(int index,String digits,StringBuilder temp,Map<Character,String>map)
    {
        if(index>=digits.length())
        {
            result.add(temp.toString());
            return;
        }

        char ch=digits.charAt(index);
        String str=map.get(ch);

        for(int i=0;i<str.length();i++)
        {
            temp.append(str.charAt(i));
            solve(index+1,digits,temp,map);
            temp.deleteCharAt(temp.length()-1);
        }
        
    }
    public List<String> letterCombinations(String digits) {
        

        if(digits.length()==0)return Collections.emptyList();

        HashMap<Character,String>map=new HashMap<>();
        map.put('2',"abc");
        map.put('3',"def");
        map.put('4',"ghi");
        map.put('5',"jkl");
        map.put('6',"mno");
        map.put('7',"pqrs");
        map.put('8',"tuv");
        map.put('9',"wxyz");

        StringBuilder temp=new StringBuilder();
        solve(0,digits,temp,map);

        return result;

    }
}
