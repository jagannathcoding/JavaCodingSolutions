Longest K unique characters substring
MediumAccuracy: 34.65%Submissions: 141K+Points: 4
Matrix Partners India: Exclusive Job-A-Thon | Apply to 15+ Companies via 1 Hiring Challenge | Starting from 29th April onwards

banner
Given a string you need to print the size of the longest possible substring that has exactly K unique characters. If there is no possible substring then print -1.

Example 1:

Input:
S = "aabacbebebe", K = 3
Output: 
7
Explanation: 
"cbebebe" is the longest substring with 3 distinct characters.
Example 2:

Input: 
S = "aaaa", K = 2
Output: -1
Explanation: 
There's no substring with 2 distinct characters.
Your Task:
You don't need to read input or print anything. Your task is to complete the function longestKSubstr() which takes the string S and an integer K as input and returns the length of the longest substring with exactly K distinct characters. If there is no substring with exactly K distinct characters then return -1.

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|).

Constraints:
1 ≤ |S| ≤ 105
1 ≤ K ≤ 26
All characters are lowercase latin characters.


class Solution {
    public int longestkSubstr(String s, int k) {
        int left = 0;
        int right = 0;
        int maxLength = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        while (right < s.length()) 
        {
            map.put(s.charAt(right), map.getOrDefault(s.charAt(right), 0) + 1);

            while (map.size() > k) 
            {
                char leftChar = s.charAt(left);
                map.put(leftChar, map.get(leftChar) - 1);
                if (map.get(leftChar) == 0) 
                {
                    map.remove(leftChar);
                }
                left++;
            }
            if (map.size() == k) 
            {
                maxLength = Math.max(maxLength, right - left + 1);
            }
            right++;
        }
        return maxLength > 0 ? maxLength : -1;
    }
}
////tc:o(n)
//sc:o(n)
