78. Subsets
Solved
Medium
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.
/*
//T.C : O(2^n)
//S.C :  O(2^n*length of each subset) to store each subset
// The recursion stack space complexity is O(N) , 
the maximum depth of the recursion is N, 
where N is the length of the input array.
*/


class Solution 
{
  List<List<Integer>> result = new ArrayList<>();
    void solve(int nums[],int index, List<Integer>temp)
    {
        if(index>=nums.length)
        {
            result.add(new ArrayList<>(temp));
            return;
        }
        temp.add(nums[index]);
        solve(nums,index+1,temp);
        temp.remove(temp.size()-1);
        solve(nums,index+1,temp);

    }

    public List<List<Integer>> subsets(int[] nums) 
    {
       List<Integer>alist=new ArrayList<>();
        solve(nums,0,alist);
        return result;
    }
}


/*
Using Bit Manipulation
class Solution
 {
    public List<List<Integer>> subsets(int[] nums) 
    {
        int l=nums.length;
        List<List<Integer>> alist= new ArrayList<>();
        for(int i=0;i<(1<<l);i++)
        {
           List<Integer>alist1=new ArrayList<Integer>();
            for(int j=0;j<l;j++)
            {
                if((i&(1<<j))!=0)
                {
                    alist1.add(nums[j]);
                }
            }
            alist.add(alist1);
        }
    
    System.out.print(alist);
    return alist;
    }
}*/
