//updated code with simple comparator

class Solution {
    public int[] frequencySort(int[] nums) 
    {
        HashMap<Integer,Integer>map=new HashMap<Integer,Integer>();
        for(int i:nums)
        {
            map.put(i,map.getOrDefault(i,0)+1);
        }
        List<Integer> list = new ArrayList<>();
        for (int num : nums) {
            list.add(num);
        }
        Collections.sort(list,(n1,n2)->{
            int f1=map.get(n1);
            int f2=map.get(n2);
            if(f1==f2)
            {
                return Integer.compare(n2,n1);
            }
            return Integer.compare(f1,f2);
        });
        int[] result = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        
        return result;
    }
}















/*class Solution {
    public int[] frequencySort(int[] nums) 
    {
        HashMap<Integer,Integer>map=new HashMap<>();
         PriorityQueue<Integer> pq = new PriorityQueue<>(
                (x, y) -> map.get(x).equals(map.get(y)) ? y - x : map.get(x) - map.get(y));

         for(int i:nums) map.put(i,map.getOrDefault(i,0)+1);

         for(int c:map.keySet()) pq.offer(c);

         ArrayList<Integer>alist=new ArrayList<>();
         while(!pq.isEmpty())
         {
                int  ch=pq.poll();
             for(int i=0;i<map.get(ch);i++)
             {
                 alist.add(ch);
             }
         }
         int[] result = new int[alist.size()];
        for (int i = 0; i < alist.size(); i++) {
            result[i] = alist.get(i);
        }
return result;
    }
}
         */
/*
class Solution {
    private static class ElementFrequency {
        int element;
        int frequency;

        ElementFrequency(int element, int frequency) {
            this.element = element;
            this.frequency = frequency;
        }
    }

    public int[] frequencySort(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        PriorityQueue<ElementFrequency> pq = new PriorityQueue<>(
                (ef1, ef2) -> ef1.frequency == ef2.frequency ? ef2.element - ef1.element : ef1.frequency - ef2.frequency);

        for (int i : nums) map.put(i, map.getOrDefault(i, 0) + 1);

        for (int key : map.keySet()) {
            pq.offer(new ElementFrequency(key, map.get(key)));
        }

        ArrayList<Integer> alist = new ArrayList<>();
        while (!pq.isEmpty()) {
            ElementFrequency ef = pq.poll();
            for (int i = 0; i < ef.frequency; i++) {
                alist.add(ef.element);
            }
        }

        int[] result = new int[alist.size()];
        for (int i = 0; i < alist.size(); i++) {
            result[i] = alist.get(i);
        }

        return result;
    }
}

//o(n*log(n))
*/



























import java.util.*;

class Solution {
    public int[] frequencySort(int[] nums) 
    {
        HashMap<Integer,Integer>map=new HashMap<>();
         PriorityQueue<Integer> pq = new PriorityQueue<>(
                (x, y) -> map.get(x).equals(map.get(y)) ? y - x : map.get(x) - map.get(y));

         for(int i:nums)
         {
             map.put(i,map.getOrDefault(i,0)+1);
         }
         for(int c:map.keySet())
         {
             pq.offer(c);
         }
         ArrayList<Integer>alist=new ArrayList<>();
         while(!pq.isEmpty())
         {
                int  ch=pq.poll();
             for(int i=0;i<map.get(ch);i++)
             {
                 alist.add(ch);
             }
         }
         int[] result = new int[alist.size()];
        for (int i = 0; i < alist.size(); i++) {
            result[i] = alist.get(i);
        }
return result;
    }
}
         
         
        
