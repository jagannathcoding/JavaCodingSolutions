https://leetcode.com/problems/sort-the-people/


2418. Sort the People (solved using 3 approaches)
Solved
Easy
Topics
Companies
Hint
You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.

For each index i, names[i] and heights[i] denote the name and height of the ith person.

Return names sorted in descending order by the people's heights.

 

Example 1:

Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.
Example 2:

Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.


*********************Approach-1********************

class Solution {
    public String[] sortPeople(String[] names, int[] heights) 
    {
        Pair[] pairs = new Pair[names.length];
        for (int i = 0; i < names.length; i++) {
            pairs[i] = new Pair(names[i], heights[i]);
        }
        Arrays.sort(pairs, new PairComparator());
        String[] result = new String[names.length];
        for (int i = 0; i < result.length; i++) {
            result[i] = pairs[i].getName();
        }
        return result;
    }
}
class PairComparator implements Comparator<Pair> 
{
    public int compare(Pair a, Pair b) {
        return Integer.compare(b.getHeight(), a.getHeight()); 
    }
}
class Pair
{
   String name;
    int height;

    Pair(String name,int height)
    {
        this.name=name;
        this.height=height;
    }
     public String getName() {
        return this.name;
    }

    public int getHeight() {
        return this.height;
    }
}
**********************Approach-2*************************
public class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        String[][] people = new String[names.length][2];
        for (int i = 0; i < names.length; i++) {
            people[i][0] = names[i];
            people[i][1] = String.valueOf(heights[i]);
        }
        Arrays.sort(people, (a, b) -> Integer.compare(Integer.parseInt(b[1]), Integer.parseInt(a[1])));
        String[] result = new String[names.length];
        for (int i = 0; i < result.length; i++) {
            result[i] = people[i][0];
        }
        return result;
    }
}

*******************Approach-3**********************
public class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        Integer[] indices = new Integer[names.length];
        for (int i = 0; i < names.length; i++) {
            indices[i] = i;
        }
        
        Arrays.sort(indices, (a, b) -> Integer.compare(heights[b], heights[a]));
        
        String[] result = new String[names.length];
        for (int i = 0; i < names.length; i++) {
            result[i] = names[indices[i]];
        }
        
        return result;
    }
}
************************Approach-3*************************
