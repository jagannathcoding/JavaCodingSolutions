921. Minimum Add to Make Parentheses Valid

A parentheses string is valid if and only if:

It is the empty string,
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.

For example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
Return the minimum number of moves required to make s valid.

 

Example 1:

Input: s = "())"
Output: 1
Example 2:

Input: s = "((("
Output: 3
 

Constraints:

1 <= s.length <= 1000
s[i] is either '(' or ')'.


**************Approach-1(using stack)*********
//tc:o(n)
//sc:o(n)
class Solution {
    public int minAddToMakeValid(String s) {
        Stack<Character>st=new Stack();
        int cnt=0;
        
        for(char c:s.toCharArray())
        {
            if(c=='(')st.push(c);

            else if(!st.isEmpty()&&c==')')st.pop();

            else cnt++;
        }

        return st.size()+cnt;

    }
}

*****************Approach 2(without using stack)*********************
//tc:o(n)
//sc:o(1)

class Solution {
    public int minAddToMakeValid(String s) {
        Stack<Character>st=new Stack();
        int cnt=0;
        int open=0;
        for(char c:s.toCharArray())
        {
            if(c=='(')cnt++;

            else if(cnt>0)cnt--;

            else open++;
        }

        return open+cnt;

    }
}
