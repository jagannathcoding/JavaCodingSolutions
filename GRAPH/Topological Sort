import java.util.*;

class Solution {

    static void dfs(int node, ArrayList<ArrayList<Integer>> adj, int vis[], Stack<Integer> st) {
        vis[node] = 1;
        for (int neigh : adj.get(node)) {
            if (vis[neigh] == 0) {
                dfs(neigh, adj, vis, st);
            }
        }
        st.push(node);
    }


    public static ArrayList<Integer> topoSort(int V, int[][] edges) {

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) 
        adj.add(new ArrayList<>());
        
        for (int[] e : edges) 
        adj.get(e[0]).add(e[1]);

        Stack<Integer> st = new Stack<>();
        int vis[] = new int[V];
       

        for (int i = 0; i < V; i++)
        {
            if (vis[i] == 0) 
            {
               dfs(i, adj, vis, st);
            }
        }

///print korchi
        ArrayList<Integer> ans = new ArrayList<>();
        while (!st.isEmpty()) {
            ans.add(st.pop());
        }
        return ans;
    }
}
