https://leetcode.com/problems/01-matrix/description/

class Node {
    int first;
    int second;
    int third; 
    Node(int _first, int _second, int _third) {
        this.first = _first; 
        this.second = _second; 
        this.third = _third; 
    }
}
class Solution {
    public int[][] updateMatrix(int[][] mat) {

        int r=mat.length;
        int c=mat[0].length;
        int vis[][]=new int[r][c];
        int dist[][]=new int[r][c];

        Queue<Node>q=new LinkedList<Node>();

        for(int i=0;i<r;i++)
        {
            for(int j=0;j<c;j++)
            {
                if(mat[i][j]==0)
                {
                    q.add(new Node(i,j,0));
                    vis[i][j]=1;
                }
                else
                {
                    vis[i][j]=0;
                }
            }
        }

         int delrow[] = {-1, 0, +1, 0}; 
	    int delcol[] = {0, +1, 0, -1}; 
	    
        while(!q.isEmpty())
        {
            int row=q.peek().first;
            int col=q.peek().second;
            int steps=q.peek().third;
            q.remove();
            dist[row][col] = steps; 
            for(int i=0;i<4;i++)
            {
                int nrow=row+delrow[i];
                int ncol=col+delcol[i];
                if(nrow>=0&&nrow<r&&ncol>=0&&ncol<c&& vis[nrow][ncol] ==0){
                    vis[nrow][ncol]=1;
                    
                    q.add(new Node(nrow,ncol,steps+1));
                }
            }
        }
        return dist;

        
    }
}
