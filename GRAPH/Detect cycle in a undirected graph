import java.util.*;

// Pair of (node, parent)
class Node {
    int first, second;
    public Node(int first, int second) {
        this.first = first;
        this.second = second;
    }
}

class Solution {

    static boolean checkForCycle(List<Integer>[] adj, int s, boolean[] vis) {
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(s, -1));
        vis[s] = true;

        while (!q.isEmpty()) {
            int node = q.peek().first;
            int par = q.peek().second;
            q.remove();

            // iterate over neighbors directly
            for (int neighbor : adj[node]) {
                if (!vis[neighbor]) {
                    vis[neighbor] = true;
                    q.add(new Node(neighbor, node));
                } 
                else if (neighbor != par) {
                    return true; // already visited and not parent â†’ cycle
                }
            }
        }
        return false;
    }

    public boolean isCycle(int V, int[][] edges) {
        
        List<Integer>[] adj = new ArrayList[V];
        for (int i = 0; i < V; i++) adj[i] = new ArrayList<>();

        for (int[] e : edges) {
            int u = e[0], v = e[1];
            adj[u].add(v);
            adj[v].add(u); // undirected
        }

        boolean[] vis = new boolean[V];

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (checkForCycle(adj, i, vis)) return true;
            }
        }
        return false;
    }
}
