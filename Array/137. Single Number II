137. Single Number II
Solved
Medium
Topics
Companies
Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

You must implement a solution with a linear runtime complexity and use only constant extra space.

https://leetcode.com/problems/single-number-ii/description/ 

Example 1:

Input: nums = [2,2,3,2]
Output: 3
Example 2:

Input: nums = [0,1,0,1,0,1,99]
Output: 99
 

Constraints:

1 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each element in nums appears exactly three times except for one element which appears once.

***************Approach-1 **************
//tc:o(n)
//sc:o(n)

class Solution 
{
    public int singleNumber(int[] nums) 
    {
        int l=nums.length;
        
            HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<l;i++)
        {
            if(map.containsKey(nums[i]))
            {
                map.put(nums[i],map.get(nums[i]) + 1);
            }
            else
            {
                map.put(nums[i], 1);
            }
        }
        
        
        
        Set<Map.Entry<Integer,Integer>>keyValueSet=map.entrySet();
        
        
            int y=0;
            //for (HashMap.Entry entry : map.entrySet())
        for(HashMap.Entry<Integer,Integer>entry:keyValueSet)
            {
                if ((int)entry.getValue() == 1)
                { 
                
                     y=(int)entry.getKey() ;
                }
            }
        return y;
    }
            
    }





*******Approach -2 **********
class Solution 
{
    public int singleNumber(int[] nums) 
    {
        int ans=0;
        for(int i=0;i<32;i++)
        {
            int countodd=0;
            int counteven=0;
            for(int j=0;j<nums.length;j++)
            {
                 if (((nums[j] >> i) & 1) == 1) countodd++;///1
                else counteven++;//0
            }
            if(countodd%3==1)///set bit of out number as 1
            {
                ans=ans|(1<<i);
            }
        }
        return ans;
    }      
}
//tc:o(n)
//sc:o(1)
