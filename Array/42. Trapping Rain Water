42. Trapping Rain Water
Solved
Hard
Topics
Companies
Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
  
Company Tags                      : Accolite, Adobe, Amazon, D-E-Shaw, MakeMyTrip, Microsoft, Payu

https://leetcode.com/problems/trapping-rain-water/

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 

Constraints:

n == height.length
1 <= n <= 2 * 104
0 <= height[i] <= 105

//tc:o(n)
//sc:o(n)

class Solution {
    public int[] getLeftMax(int height[])
    {
        int maxLeft[]=new int[height.length];
        maxLeft[0]=height[0];
        for(int i=1;i<height.length;i++)
        {
            maxLeft[i]=Math.max(maxLeft[i-1],height[i]);
        }
        return maxLeft;
    }
     public int[] getRightMax(int height[])
    {
        int maxRight[]=new int[height.length];
        maxRight[height.length-1]=height[height.length-1];
        for(int i=height.length-2;i>=0;i--)
        {
            maxRight[i]=Math.max(maxRight[i+1],height[i]);
        }
        return maxRight;
    }
    public int trap(int[] height) 
    {
        int l = height.length;
        if (l == 1 || l == 0)
            return 0;

           int[] leftMax = getLeftMax(height);
        int[] rightMax = getRightMax(height);

        int sum = 0;
        for (int i = 0; i < l; i++) 
        {
            sum += Math.min(leftMax[i], rightMax[i]) - height[i];
        }
        return sum;
    }
}
