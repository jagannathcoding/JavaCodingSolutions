Minimum Swaps required to group all 1s together

https://www.geeksforgeeks.org/problems/minimum-swaps-required-to-group-all-1s-together2451/1?itm_source=geeksforgeeks&itm_medium=article&itm_campaign=practice_card

Difficulty: EasyAccuracy: 35.39%Submissions: 10K+Points: 2
Given an array of 0s and 1s, we need to write a program to find the minimum number of swaps required to group all 1s present in the array together.

Example 1:

Input : arr[ ] = {1, 0, 1, 0, 1}
Output : 1
Explanation:
Only 1 swap is required to group all 1's together. 
Swapping index 1 and 4 will give arr[] = {1, 1, 1, 0, 0}.

Example 2:

Input : arr[ ] = {1, 0, 1, 0, 1, 1} 
Output :  1
 

Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function minSwaps() that takes an array (arr), sizeOfArray (n) and return the minimum number of swaps required and if no 1's are present print -1. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ N  ≤ 105
0 ≤ Arri ≤ 1

Company Tags
Adobe

//tc:o(N)
//sc:o(1)

class Complete {

    // Function for finding maximum and value pair
    public static int minSwaps(int arr[], int n) {
        // Complete the function
        int freqOfOnes=0;
        for(int i:arr)
        {
            if(i==1)freqOfOnes++;
        }
        if(freqOfOnes==0)return -1;
        int subArrayLength=freqOfOnes;
        int maximumOnes=0;
        int ones=0;
        for(int i=0;i<subArrayLength;i++)
        {
            if(arr[i]==1)ones++;
        }
        maximumOnes=ones;
        for(int i=1;i<=n-subArrayLength;i++)
        {
            if(arr[i-1]==1)ones--;
            
            if(arr[i+subArrayLength-1]==1)ones++;
            
            
            if(ones>maximumOnes)maximumOnes=ones;
        }
        
        return subArrayLength-maximumOnes;
    }
}
