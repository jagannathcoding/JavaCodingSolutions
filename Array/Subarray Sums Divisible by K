974. Subarray Sums Divisible by K
Solved
Medium
Topics
Companies : Amazon, Microsoft, Paytm
Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104




************Approach -2 better using o(n^2) (again time limit exceed)
class Solution 
{
	public int subarraysDivByK(int[] nums, int k) 
    {
		int cumulativeSum[]=new int[nums.length];
        //int sum=0;
        int cnt=0;
        cumulativeSum[0]=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            cumulativeSum[i]=cumulativeSum[i-1]+nums[i];
        }
        int l=nums.length;
        for(int i=0;i<l;i++)
        {
            for(int j=i;j<l;j++)
            {
                int sum=(i==0)?cumulativeSum[j]:cumulativeSum[j]-cumulativeSum[i-1];

                if(sum%k==0)cnt++;
            }
        }
        return cnt;
    }
}




**************Approach-3*************(Optimal)
class Solution 
{
	public int subarraysDivByK(int[] nums, int k) 
    {
		HashMap<Integer, Integer> map = new HashMap<>();
		map.put(0, 1); 
		int count = 0;
		int sum = 0;
        int maxLength=0;
		for (int i = 0; i < nums.length; i++)
         {
			sum += nums[i];
			//int remainder = sum % k;
			/*if (remainder < 0)
            {
                remainder=remainder+ k;
            }*/
             int remainder = (sum % k + k) % k;
			if (map.containsKey(remainder)) 
            {
				count += map.get(remainder);
                maxLength = Math.max(maxLength, i - map.get(remainder));
			}
			map.put(remainder, map.getOrDefault(remainder, 0) + 1);
		}
		return count;
	}
}
