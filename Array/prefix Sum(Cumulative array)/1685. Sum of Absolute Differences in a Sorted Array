1685. Sum of Absolute Differences in a Sorted Array
Solved
Medium
Topics
Companies : Adobe 
Hint
You are given an integer array nums sorted in non-decreasing order.

Build and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.

In other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).

 

Example 1:

Input: nums = [2,3,5]
Output: [4,3,5]
Explanation: Assuming the arrays are 0-indexed, then
result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,
result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,
result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.
Example 2:

Input: nums = [1,4,6,8,10]
Output: [24,15,13,15,21]
 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= nums[i + 1] <= 104



/////////Approach 1
class Solution 
{
    public int[] getSumAbsoluteDifferences(int[] nums) 
    {
        int l=nums.length;
        int prefixSum[]=new int[l];
        prefixSum[0]=nums[0];

        for(int i=1;i<l;i++)
        {
            prefixSum[i]=prefixSum[i-1]+nums[i];
        }

        int res[]=new int[l];

        for(int i=0;i<l;i++)
        {
            int leftSum=prefixSum[i]-nums[i];
            int rightSum=prefixSum[l-1]-prefixSum[i];

            int leftCount=i;
            int rightCount=l-i-1;

            int leftTotal=(leftCount*nums[i])-leftSum;
            int rightTotal=rightSum-(nums[i]*rightCount);

            res[i] = leftTotal + rightTotal;
        }
        return res;
    }
}
//tc:o(n)
//sc:o(1)



//Approach-2 (Without using extra space for prefix sum)
public class Solution {
    public int[] getSumAbsoluteDifferences(int[] nums) {
        int n = nums.length;
        int sum = Arrays.stream(nums).sum();

        int[] result = new int[n];
        int prefixSum = 0;

        for (int i = 0; i < n; i++) {
            int leftSum = prefixSum;
            int rightSum = sum - prefixSum - nums[i];

            int leftCount = i;
            int rightCount = n - i - 1;

            int leftTotal = (leftCount * nums[i]) - leftSum;
            int rightTotal = rightSum - (nums[i] * rightCount);

            result[i] = leftTotal + rightTotal;
            prefixSum += nums[i];
        }

        return result;
    }
}
//tc:o(n)
//sc:o(1)
