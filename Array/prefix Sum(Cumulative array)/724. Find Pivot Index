724. Find Pivot Index

https://leetcode.com/problems/find-pivot-index/description/


Company  : Amazon, Adobe, Coupang, Radius

Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

 
Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
Example 3:

Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 

Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000



////////////////Approach 1 without using extra space
class Solution 
{
    public int pivotIndex(int[] nums) 
    {

         if(nums.length== 1)
            return 0; //if only 1 element, it's left and right are equal 
        
        
        int s=0;
        for(int i:nums)s=s+i;

       
        int cs=0;
        for(int i=0;i<nums.length;i++)
        {
             int ls=cs;
             int rs=s-cs-nums[i];
             if(ls==rs)return i;

             cs=cs+nums[i];
        }
        return -1;
    }
}
//tc:o(n)
//sc:o(1)



////Approach 2 using extra space
//tc:O(n)
//sc:o(n)
public class Solution {
    public int pivotIndex(int[] a) {
        long[] cumu_sum = new long[a.length];
        cumu_sum[0] = a[0];
        long totalSum = a[0];

        for (int i = 1; i < a.length; i++) {
            totalSum += a[i];
            cumu_sum[i] = cumu_sum[i - 1] + a[i];
        }

        /*
            Example:
            A[]      = {1, 3, 5,  2, 2 }
            cumu_sum = {1, 4, 9, 11, 13}
            TotalSum = 13
            
            For i = 1, cumu_sum = 4
            sum at the left of i = 1 : cumu_sum[i] - a[i] = 4-3 = 1.   (i.e. 1)
            
            sum at the right of i = 1 : TotalSum - left_sum - a[i] = 13 - 1 - 3 = 9. (i.e. 5 + 2 + 2)
        
        for (int i = 0; i < a.length; i++) {
            long left_sum = (i > 0) ? cumu_sum[i - 1] : 0;
            long right_sum = totalSum - left_sum - a[i];

            if (left_sum == right_sum) {
                return i;
            }
        }

        return -1;
    }


    tc:o(n)
    sc;o(n)
}*/
