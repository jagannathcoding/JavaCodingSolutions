260. Single Number III

https://leetcode.com/problems/single-number-iii/


Solved
Medium
Topics
Companies
Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.
Example 2:

Input: nums = [-1,0]
Output: [-1,0]
Example 3:

Input: nums = [0,1]
Output: [1,0]
 

Constraints:

2 <= nums.length <= 3 * 104
-231 <= nums[i] <= 231 - 1
Each integer in nums will appear twice, only two integers will appear once.


***************Approach -1 *****************(using map)
//tc:o(n)
//sc:o(n)
class Solution 
{
    public int[] singleNumber(int[] nums) 
    {
        int l=nums.length;
        
            HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<l;i++)
        {
            if(map.containsKey(nums[i]))
            {
                map.put(nums[i],map.get(nums[i]) + 1);
            }
            else
            {
                map.put(nums[i], 1);
            }
        }
        
        
        ArrayList<Integer>alist=new ArrayList<Integer>();

        Set<Map.Entry<Integer,Integer>>keyValueSet=map.entrySet();
        
        
            int y=0;
            //for (HashMap.Entry entry : map.entrySet())
        for(HashMap.Entry<Integer,Integer>entry:keyValueSet)
            {
                if ((int)entry.getValue() == 1)
                { 
                
                     y=(int)entry.getKey() ;
                     alist.add(y);
                }
            }

 int[] arr = alist.stream().mapToInt(i -> i).toArray();

        return arr;
    }
            
    }

***************Approach -2 *****************
import java.util.Arrays;

class Solution {
    public int[] singleNumber(int[] nums) {
        int xor=0;
       for(int i:nums)xor^=i;
        int mask = 1;
        while ((xor& mask) == 0) 
        {
            mask <<= 1;
        }
        int groupA = 0;
        int groupB = 0;
        // Divide the numbers into two groups and perform XOR in each group
        for (int num : nums) 
        {
            if ((num & mask) != 0) {
                groupA ^= num;
            } else 
            {
                groupB ^= num;
            }
        }
        return new int[]{groupA, groupB};
    }
}

//tc:o(n)
//sc:o(1)

*************Approach -3 ***************
//Approach (Optimal)
//T.C : O(n)
//S.C : O(1)
class Solution {
    public int[] singleNumber(int[] nums) {
        long xor_r = 0;

        // Perform XOR for all elements to find xor_r
        for (int num : nums) {
            xor_r ^= num;
        }

        // Find the rightmost set bit (mask)
        long mask = xor_r & (-xor_r);

        int groupa = 0;
        int groupb = 0;

        // Divide the numbers into two groups and perform XOR in each group
        for (int num : nums) {
            if ((num & mask) != 0) {
                groupa ^= num;
            } else {
                groupb ^= num;
            }
        }

        // Return the two unique numbers
        return new int[]{groupa, groupb};
    }
}
