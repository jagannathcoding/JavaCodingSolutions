Row with max 1s
MediumAccuracy: 33.09%Submissions: 239K+Points: 4
Given a boolean 2D array of n x m dimensions, consisting of only 1's and 0's, where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Example 1:

Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).

Example 2:

Input: 
N = 2, M = 2
Arr[][] = {{0, 0}, {1, 1}}
Output: 1
Explanation: Row 1 contains 2 1's (0-based
indexing).

Your Task:  
You don't need to read input or print anything. Your task is to complete the function rowWithMax1s() which takes the array of booleans arr[][], n and m as input parameters and returns the 0-based index of the first row that has the most number of 1s. If no such row exists, return -1.
 

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(1)


Constraints:
1 ≤ N, M ≤ 103
0 ≤ Arr[i][j] ≤ 1 

 

Company Tags
Amazon Microsoft Snapdeal
Topic Tags
ArraysMatrixData Structures




class Solution {
    
    int lowerBound(int arr[],int n,int x)
    {
        int lb=0;
        int ub=n-1;
        int ans=n;
        while(lb<=ub)
        {
            int mid=lb+(ub-lb)/2;
            if(arr[mid]>=x)
            {
                ans=mid;
                ub=mid-1;
            }
            else
            {
                lb=mid+1;
            }
        }
        return ans;
    }
    int rowWithMax1s(int arr[][], int n, int m) {
        // code here
        int cntMax=0;
        int index=-1;
        for(int i=0;i<n;i++)
        {
            int cntOnes=m-lowerBound(arr[i],m,1);
            if(cntOnes>cntMax)
            {
                cntMax=cntOnes;
                index=i;
            }
        }
        return index;
        
        
    }
}



Time Complexity: O(n X logm), where n = number of rows, m = number of columns.
We are using a loop running for n times to traverse the rows. After that we are applying binary search on each row with m columns.
Space Complexity: O(1) 
