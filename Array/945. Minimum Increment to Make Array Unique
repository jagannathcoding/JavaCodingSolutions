945. Minimum Increment to Make Array Unique (using 2 approaches solved)
Solved
Medium
Topics
Companies
You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.

Return the minimum number of moves to make every value in nums unique.

The test cases are generated so that the answer fits in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,2]
Output: 1
Explanation: After 1 move, the array could be [1, 2, 3].
Example 2:

Input: nums = [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].
It can be shown with 5 or less moves that it is impossible for the array to have all unique values.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105


*****************Approach-1******************
//tc:o(n log n)
//sc:o(1)

class Solution {
    public int minIncrementForUnique(int[] nums) {
        
        Arrays.sort(nums);
        int moves=0;
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]<=nums[i-1])
            {
                moves+=(nums[i-1]-nums[i])+1;
                nums[i]=nums[i-1]+1;
            }
        }
        return moves;
    }
}
//tc:o(n log n)
//sc:o(1)


*****************Approach-2******************
//T.C : O(n+maxElement)
//S.C : O(n+Element)
class Solution {
    public int minIncrementForUnique(int[] nums) {
        int maxElement = 0;
        int moves = 0;

        for (int val : nums)
        {
            maxElement = Math.max(maxElement, val);
        }
        int l=nums.length;
        int cnt[]=new int[l+maxElement];
        for(int i:nums)
        {
            cnt[i]++;
        }
        for(int i=0;i<cnt.length;i++)
        {
            if(cnt[i]<=1)continue;

            int extra=cnt[i]-1;
            cnt[i+1]+=extra;
            cnt[i]=1;
            moves+=extra;
        }
        return moves;
    }
}
