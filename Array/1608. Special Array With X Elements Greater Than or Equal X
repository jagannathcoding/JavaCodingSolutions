1608. Special Array With X Elements Greater Than or Equal X
Easy
Topics
Companies : AMAZON
Hint
You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.

Notice that x does not have to be an element in nums.

Return x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.

 

Example 1:

Input: nums = [3,5]
Output: 2
Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.
Example 2:

Input: nums = [0,0]
Output: -1
Explanation: No numbers fit the criteria for x.
If x = 0, there should be 0 numbers >= x, but there are 2.
If x = 1, there should be 1 number >= x, but there are 0.
If x = 2, there should be 2 numbers >= x, but there are 0.
x cannot be greater since there are only 2 numbers in nums.
Example 3:

Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values that are greater than or equal to 3.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000

************Approach -1 **********Brute Force


class Solution {
    int findgreaterthanequalto(int nums[],int x)
    {
        int count=0;
        for (int num : nums) 
            {
                if (num >= x) 
                {
                    count++;
                }
            }
            return count;
    }
    public int specialArray(int[] nums) {
        for (int x = 0; x <= nums.length; x++) 
        {
            int count=findgreaterthanequalto(nums,x);
            if (count == x) {
                return x;
            }
        }
        
     
        return -1;
    }
}
tc:o(n^2)
sc:o(1)


***********Approach-2*******************
class Solution {
    int lowerBound(int []nums, int x) {
        // Write your code here
        int lb=0;
        int ub=nums.length-1;
        int ans=nums.length;
        while(lb<=ub)
        {
            int mid=lb+(ub-lb)/2;
            if(nums[mid]>=x)
            {
                ub=mid-1;
                ans=mid;
            }
            else{
                lb=mid+1;
            }
        }
        return ans;
        
    }

    public int specialArray(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;

        for (int x = 0; x <= n; x++) {
            int i = lowerBound(nums, x);

            if (n - i == x) {
                return x;
            }
        }

        return -1;
    }
    }
    ///////////
tc:o(n log n)
//sc:o(1)

********************Approach-3*************
class Solution {
    int lowerBound(int []nums, int x) {
        // Write your code here
        int lb=0;
        int ub=nums.length-1;
        int ans=nums.length;
        while(lb<=ub)
        {
            int mid=lb+(ub-lb)/2;
            if(nums[mid]>=x)
            {
                ub=mid-1;
                ans=mid;
            }
            else{
                lb=mid+1;
            }
        }
        return ans;
        
    }

    public int specialArray(int[] nums) {
        Arrays.sort(nums);
        int lb=0;
        int ub=nums.length;
       while(lb<=ub)
       {
            int mid=lb+(ub-lb)/2;
            int idx=lowerBound(nums,mid);
            int ele=nums.length-idx;
            if(ele==mid)return mid;
            else if(ele>mid)lb=mid+1;
            else if(ele<mid)ub=mid-1;
         }
        return -1;
    }
    }
    //T.C : O(nlogn)
//S.C : O(1)

************Approach -4 ***********(Using counting Sort + Prefix Sum)
///to be updated soon
