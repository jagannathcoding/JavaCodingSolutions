2348. Number of Zero-Filled Subarrays

https://leetcode.com/problems/number-of-zero-filled-subarrays/description/

2348. Number of Zero-Filled Subarrays
Solved
Medium
Topics
Companies
Hint
Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.
Example 2:

Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.
Example 3:

Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

APPROACH -1

class Solution {
    public long zeroFilledSubarray(int[] nums) {
        int l=nums.length;
        long res=0;
        long cntZero=0;
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]==0)
            {
                cntZero++;
            }
            else
            {
                cntZero=0;
            }
            res+=cntZero;
        }
        return res;
    }
}
tc:o(n)
//sc:o(1)
////////////Approach-2

//Simple mathematical approach

class Solution {
    public long zeroFilledSubarray(int[] nums) {
        long res=0;
        int i=0;
        while(i<nums.length)
        {
            long cntZero=0;
            if(nums[i]==0)
            {
                while(i<nums.length&&nums[i]==0)
                {
                    i++;
                    cntZero++;
                }
            }
            else
            {
                i++;
            }
            res+=(cntZero)*(cntZero+1)/2;
        }
        return res;
    }
}
tc:o(n)
//sc:o(1)
