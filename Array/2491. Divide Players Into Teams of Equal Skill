2491. Divide Players Into Teams of Equal Skill
Solved
Medium
Topics
Companies
Hint
You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.

The chemistry of a team is equal to the product of the skills of the players on that team.

Return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.

 

Example 1:

Input: skill = [3,2,5,1,3,4]
Output: 22
Explanation: 
Divide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.
The sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.
Example 2:

Input: skill = [3,4]
Output: 12
Explanation: 
The two players form a team with a total skill of 7.
The chemistry of the team is 3 * 4 = 12.
Example 3:

Input: skill = [1,1,2,3]
Output: -1
Explanation: 
There is no way to divide the players into teams such that the total skill of each team is equal.
 

Constraints:

2 <= skill.length <= 105
skill.length is even.
1 <= skill[i] <= 1000

**********Approach-1************
//tc:o(n log n)
//sc:o(1)
class Solution {
    public long dividePlayers(int[] skill) {
        Arrays.sort(skill);
        int i=0;
        int j=skill.length-1;
        int sum=skill[i]+skill[j];
        long res=0;
        while(i<j)
        {
            int currSkill=skill[i]+skill[j];
            if(currSkill!=sum)return -1;

            res+=(long)(skill[i]*skill[j]);
            i++;
            j--;
        }
        return res;
    }
}


***************Approach-2**************
class Solution {
    public long dividePlayers(int[] skill) {
       int freq[]=new int [1001];
       int sum=0;
       for(int i:skill)
       {
        sum+=i;
        freq[i]++;
       }
        int l=skill.length;
       int team=l/2;
        if(sum%team!=0)return -1;

       int targetSum=sum/team;
       long chem=0;

       for(int i:skill)
       {
            int remainingSkill=targetSum-i;
            if(freq[remainingSkill]<=0)
            {
                return -1;
            }
        chem += (long) i * (long) remainingSkill;
            freq[remainingSkill]--;
        }

        return chem / 2;
    }
}
//tc:o(n)
////S.C : O(1000) ~= O(1)
