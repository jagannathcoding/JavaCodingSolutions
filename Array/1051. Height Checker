1051. Height Checker
Solved
Easy
Topics
Companies
Hint
A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.

You are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the ith student in line (0-indexed).

Return the number of indices where heights[i] != expected[i].

 

Example 1:

Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.
Example 2:

Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.
Example 3:

Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.
 

Constraints:

1 <= heights.length <= 100
1 <= heights[i] <= 100



*****************Approach -1 ***********************
class Solution {
    public void countingSort(int[] nums) {
        int n = nums.length;
        int maxVal = Arrays.stream(nums).max().getAsInt();
        
        int[] count = new int[maxVal + 1];
        
        // Count the occurrences of each number
        for (int num : nums) {
            count[num]++;
        }
        
        // Compute the cumulative count
        for (int i = 1; i <= maxVal; i++) {
            count[i] += count[i - 1];
        }
        
        int[] sortedNums = new int[n];
        
        // Construct the sorted array in ascending order
        for (int i = n - 1; i >= 0; i--) {
            sortedNums[count[nums[i]] - 1] = nums[i];
            count[nums[i]]--;
        }
        
        // Copy the sorted array back to the original array
        System.arraycopy(sortedNums, 0, nums, 0, n);
    }

    public int heightChecker(int[] heights) {
        int n = heights.length;
        
        int[] sortedHeights = Arrays.copyOf(heights, n);
        countingSort(sortedHeights);
        
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (heights[i] != sortedHeights[i]) {
                result++;
            }
        }
        
        return result;
    }

    
}



**********************Approach-2*****************
class Solution {
    public void countingSort(int[] nums) {
        int minVal = Arrays.stream(nums).min().getAsInt();
        int maxVal = Arrays.stream(nums).max().getAsInt();
        
        int range = maxVal - minVal + 1;
        int[] count = new int[range];
        
       
        for (int num : nums) {
            count[num - minVal]++;
        }
       
        int index = 0;
        for (int i = 0; i < range; i++) {
            while (count[i] > 0) {
                nums[index] = i + minVal;
                index++;
                count[i]--;
            }
        }
    }

    public int heightChecker(int[] heights) {
        int n = heights.length;
        
        int[] sortedHeights = Arrays.copyOf(heights, n);
        countingSort(sortedHeights);
        
        int result = 0;
        for (int i = 0; i < n; i++) {
            if (heights[i] != sortedHeights[i]) {
                result++;
            }
        }
        
        return result;
    }   
}
