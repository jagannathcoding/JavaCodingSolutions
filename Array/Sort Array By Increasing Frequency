/*class Solution {
    public int[] frequencySort(int[] nums) 
    {
        HashMap<Integer,Integer>map=new HashMap<>();
         PriorityQueue<Integer> pq = new PriorityQueue<>(
                (x, y) -> map.get(x).equals(map.get(y)) ? y - x : map.get(x) - map.get(y));

         for(int i:nums) map.put(i,map.getOrDefault(i,0)+1);

         for(int c:map.keySet()) pq.offer(c);

         ArrayList<Integer>alist=new ArrayList<>();
         while(!pq.isEmpty())
         {
                int  ch=pq.poll();
             for(int i=0;i<map.get(ch);i++)
             {
                 alist.add(ch);
             }
         }
         int[] result = new int[alist.size()];
        for (int i = 0; i < alist.size(); i++) {
            result[i] = alist.get(i);
        }
return result;
    }
}/*Time Complexity – O(N log m) where N is the number of elements in the array

Space Complexity – O(N) for storing the elements in Map*/*/


//////
Approach 2-
//////
class Solution {
    public int[] frequencySort(int[] nums) {
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
        for (int num : nums) {
            int count = map.getOrDefault(num, 0) + 1;
            map.put(num, count);
        }
        List<Integer> list = new ArrayList<Integer>();
        for (int num : nums)
            list.add(num);

        Collections.sort(list, new Comparator<Integer>() {
            public int compare(Integer num1, Integer num2) {
                int count1 = map.get(num1), count2 = map.get(num2);
                if (count1 != count2)
                    return count1 - count2;
                else
                    return num2 - num1;
            }
        });
        int length = nums.length;
        int[] sorted = new int[length];
        for (int i = 0; i < length; i++)
            sorted[i] = list.get(i);
        return sorted;

// return list.stream().mapToInt(i -> i).toArray();



    }
} //tc:o(nlogn)// O(N log N) as time complexity of Collections.sort() is O(nlog(n)
//sc:o(n)

////Approach 3/////

