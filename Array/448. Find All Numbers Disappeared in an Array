448. Find All Numbers Disappeared in an Array

https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/

448. Find All Numbers Disappeared in an Array
Solved
Easy
Topics
Companies
Hint
Given an array nums of n integers where nums[i] is in the range [1, n], 
return an array of all the integers in the range [1, n] that do not appear in nums.

Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]
Example 2:
Input: nums = [1,1]
Output: [2]
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= n
 
Follow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.


*****************************APPROACH -1 (follow up question)
//TC:O(N)
//SC;o(1)

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums)
     {
        List<Integer> missingNumbers=new ArrayList<>();
        for (int i = 0; i < nums.length; i++) 
        {
            int number = Math.abs(nums[i]);
            int index = number - 1;
            nums[index] = -Math.abs(nums[index]); // Mark the presence by negating
        }
        // Iterate over the array to find the unmarked indices
        for (int i = 0; i < nums.length; i++) 
        {
            if (nums[i] > 0) 
            {
                // The index (i + 1) is not marked, so it represents a missing number
                missingNumbers.add(i + 1);
            }
        }
        return missingNumbers;
    }
}




//////////////////////////////////approach -2
//tc:o(n)
//sc:o(n)
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums)
     {
        Set<Integer> set = new HashSet<>();
        ArrayList<Integer> result = new ArrayList<>();

        for (int i : nums)
        {
         set.add(i); 
        }
       for(int i = 1; i <=nums.length; i++)
       {
           if(!set.contains(i))
           {
            result.add(i);
           }
       }
        return result;
    }
}
