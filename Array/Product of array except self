*****************Approach-1
//tc:o(n^2)
//sc:o(N)
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int p=1;
        int res[]=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            for(int j=0;j<nums.length;j++)
            {
                if(j!=i)
                {
                    p=p*nums[j];
                }
            }
            res[i]=p;
            p=1;
        }
        return res;
    }
}


///////////////////////////Approach-2////////////////

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int p=1;
        int productWithoutZero=1;
        int countZero=0;
        int res[]=new int[nums.length];
        for(int i=0;i<nums.length;i++)
        {
            p=p*nums[i];
            if(nums[i]!=0)
            {
                 productWithoutZero= productWithoutZero*nums[i];
            }
            if(nums[i]==0)
            {
                countZero++;
            }
        }
        for(int i=0;i<nums.length;i++)
        {
            if(nums[i]!=0)
            {
                if(countZero>0)
                {
                    res[i]=0;
                }
                else
                {
                    res[i]= productWithoutZero/nums[i];
                }
            }
            else if(nums[i]==0)
            {
                if(countZero>1)
                {
                    res[i]=0;
                }
                else
                {
                    res[i]= productWithoutZero;
                }
            }
        }
        return res;
        }
}
///APPROACH -3
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int res[]=new int[nums.length];
        int left[]=new int[nums.length];
        int right[]=new int[nums.length];
        left[0]=1;
        right[nums.length-1]=1;
        for(int i=1;i<nums.length;i++)
        {
            left[i]=left[i-1]*nums[i-1];
        }
        for(int i=nums.length-2;i>=0;i--)
        {
            right[i]=right[i+1]*nums[i+1];
        }
        for(int i=0;i<nums.length;i++)
        res[i]=left[i]*right[i];

        return res;
        }
        }
//TC:O(N)
//SC:O(N)
///////////////
*******************APPROACH-4**********
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int res[]=new int[nums.length];
       
       
        res[0]=1;
        for(int i=1;i<nums.length;i++)
        {
            res[i]=nums[i-1]*res[i-1];
        }
        int right=1;
        for(int i=nums.length-1;i>=0;i--)
        {
            res[i]=res[i]*right;
            right=right*nums[i];
        }
        return res;
}
// Approach-3 (Using constant space)
// T.C: O(n)
// S.C: O(1)
}
//////
        
