962. Maximum Width Ramp

Company : Google, Amazon


A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.

Given an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.

https://leetcode.com/problems/maximum-width-ramp/description/
 

Example 1:

Input: nums = [6,0,8,2,1,5]
Output: 4
Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.
Example 2:

Input: nums = [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.
 

Constraints:

2 <= nums.length <= 5 * 104
0 <= nums[i] <= 5 * 104

*************Approach-1************* //Passes 95/101 test cases)//tle 
class Solution {
    public int maxWidthRamp(int[] nums) {
        int l= nums.length;
        int res=0;
        for(int i=0;i<l;i++)
        {
            for(int j=i+1;j<l;j++)
            {
                if(nums[i]<=nums[j])
                {
                    res=Math.max(res,j-i);
                }
            }
        }
        return res;
    }
}


***********Approach-2***********


******************Approach-3**********
class Solution {
    public int maxWidthRamp(int[] nums) {
        int l= nums.length;
        int maxRight[]=new int[l];
        maxRight[l-1]=nums[l-1];
        for(int i=l-2;i>=0;i--)
        {
            maxRight[i]=Math.max(nums[i],maxRight[i+1]);
        }
        int res=0;
        int i=0;
        int j=0;
        while(j<l)
        {
            while(i<j&&nums[i]>maxRight[j])i++;

            
            res=Math.max(res,j-i);
            j++;
        }
        return res;
    }
}
