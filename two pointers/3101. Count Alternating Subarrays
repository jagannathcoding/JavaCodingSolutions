3101. Count Alternating Subarrays

You are given a 
binary array
 nums.

We call a 
subarray
 alternating if no two adjacent elements in the subarray have the same value.

Return the number of alternating subarrays in nums.

 

Example 1:

Input: nums = [0,1,1,1]

Output: 5

Explanation:

The following subarrays are alternating: [0], [1], [1], [1], and [0,1].

Example 2:

Input: nums = [1,0,1,0]

Output: 10

Explanation:

Every subarray of the array is alternating. There are 10 possible subarrays that we can choose.

 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.


class Solution {
    public long countAlternatingSubarrays(int[] nums) {
        
        long count=0;
        int l=nums.length;
        for(int i=0;i<l;i++)
        {
            int j=i;
            while(j+1<l && nums[j]!=nums[j+1])
            {
                j++;//will increase j till we are getting alternating subarrays
            }
            int len=j-i+1;
            count+=(long)len*(len+1)/2;
            i=j;
        }
        return count;
    }
}
//tc:o(n)
//sc:o(1)
