First Unique Character in a String
Solved
Easy
Topics
Companies
Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.

 

Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1
 

Constraints:

1 <= s.length <= 105
s consists of only lowercase English letters.


class Solution {
    public int firstUniqChar(String s) 
    {
        int cnt[]=new int[26];
        for(char ch:s.toCharArray())
        {
            cnt[ch-'a']++;
        }
        for(int i=0;i<s.length();i++)
        {
            if(cnt[s.charAt(i)-'a']==1)return i;
        }
        return -1;
    }
}
//T.C : O(n)
//S.C : O(1)


//with hashmap
class Solution {
    public int firstUniqChar(String s) {
      
        HashMap<Character,List<Integer>>map=new HashMap<>();
        for(int i=0;i<s.length();i++)
        {
            if(!map.containsKey(s.charAt(i)))
            {
                map.put(s.charAt(i),new ArrayList<>());
            }
            map.get(s.charAt(i)).add(i);
        }
        for(int i=0;i<s.length();i++)
        {
            char c=s.charAt(i);
            List<Integer>val=map.get(c);
            if(val.size()==1)return val.get(0);
        }
        return -1;
    }
}
       
       //tc:o(n)
       //sc:o(n)
