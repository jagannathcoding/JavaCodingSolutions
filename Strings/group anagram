49. Group Anagrams
Solved
Medium
Topics
Companies
Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        
        
        Map<String, List<String>> map = new HashMap<>();
        for(int i=0;i<strs.length;i++)
        {
            String s1=strs[i];
            char tempArray[] = s1.toCharArray();
            Arrays.sort(tempArray);
            String s2=new String(tempArray);
           if (!map.containsKey(s2)) {
                map.put(s2, new ArrayList<>());
            }

            map.get(s2).add(strs[i]);     
        }
         return new ArrayList<>(map.values());
    }
} 
tc:o(n)
sc:o(n)
/////approach 2

//Approach-2
//T.C : O(n*k)  (n = size of input, k = maximum length of a string in the input vector)
//S.C : O(n*k)
class Solution {
    private String generate(String s)
     {
        int[] count = new int[26];

        for (char ch : s.toCharArray()) {
            count[ch - 'a']++;
        }

        StringBuilder sb= new StringBuilder();

        for (int i = 0; i < 26; i++) {
            if (count[i] > 0) {
                sb.append(String.valueOf((char) (i + 'a')).repeat(count[i]));
            }
        }

        return sb.toString();
    }

     

    public List<List<String>> groupAnagrams(String[] strs) 
    {
        Map<String, List<String>> map = new HashMap<>();

        for (String s : strs) 
        {
            String newString = generate(s);

            if (!map.containsKey(newString)) {
                map.put(newString, new ArrayList<>());
            }

            map.get(newString).add(s);
        }

        return new ArrayList<>(map.values());
    }
}
