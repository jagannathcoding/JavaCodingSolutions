409. Longest Palindrome

Given a string s which consists of lowercase or uppercase letters, return the length of the longest 
palindrome
 that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome.

 

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:

Input: s = "a"
Output: 1
Explanation: The longest palindrome that can be built is "a", whose length is 1.
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase and/or uppercase English letters


*************************Approach-1******************
class Solution {
    public int longestPalindrome(String s) {
       int l=s.length();
       int res=0;
       HashSet<Character>set=new HashSet<>();
       for(char c:s.toCharArray())
       {
            if(!set.contains(c))set.add(c);
            else
            {
                res+=2;
                set.remove(c);
            }
       }
       if(!set.isEmpty())res++;

       return res;
    }
}
//tc:o(n)
//sc:o(n)

**********************Approach-2********************
class Solution {
    public int longestPalindrome(String s) {
       int l=s.length();
       int res=0;
       HashMap<Character,Integer>map=new HashMap<>();
       for(char c:s.toCharArray())
       {
            map.put(c,map.getOrDefault(c,0)+1);
       }
       boolean singleCharacter=false;
       for(int count:map.values())
       {
            if(count%2==0)res+=count;
            
            else
            {
                res+=count-1;////////////intput azabb
                //output: bazab
                singleCharacter=true;
            }
       }

        if(singleCharacter==true)res++;
       return res;
    }
}
//tc:o(n)
//sc:o(n)

*************************Approach -3 ************************
//tc:o(n)
//sc:o(n)
class Solution {
    public int longestPalindrome(String s) {
       int l=s.length();
       int res=0;
       int oddFreq=0;
       HashMap<Character,Integer>map=new HashMap<>();
       for(char c:s.toCharArray())
       {
            map.put(c,map.getOrDefault(c,0)+1);
            if(map.get(c)%2!=0)
            {
                oddFreq++;
            }
            else
            {
                oddFreq--;
            }
       }
       
        if(oddFreq>0)return l-oddFreq+1;
       
       return l;
    }
}

*****************Approach 4 **************(optimal )
//tc:o(n)
//sc:o(1)
class Solution {
    public int longestPalindrome(String s) {
       int l=s.length();
       int res=0;
        int cnt[]=new int[128];
       for(char c:s.toCharArray())
       {
            cnt[ch]++;
       }
       int res=0;
       for(int i=0;i<128;i++)
       {
            int val=cnt[i];
            if(val%2==1&&res%2==0)
            {
                res++;
            }
            res=res+(val/2)*2;
       }
       
       
       
       return res;
    }
}
