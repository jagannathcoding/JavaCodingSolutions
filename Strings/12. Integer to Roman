12. Integer to Roman

https://leetcode.com/problems/integer-to-roman/

Seven different symbols represent Roman numerals with the following values:

Symbol	Value
I	1
V	5
X	10
L	50
C	100
D	500
M	1000
Roman numerals are formed by appending the conversions of decimal place values from highest to lowest.
Converting a decimal place value into a Roman numeral has the following rules:

If the value does not start with 4 or 9, select the symbol of the maximal value that can be subtracted from the input, 
append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral.
If the value starts with 4 or 9 use the subtractive form representing one symbol subtracted from the following symbol, 
for example, 4 is 1 (I) less than 5 (V): IV and 9 is 1 (I) less than 10 (X): IX.
Only the following subtractive forms are used: 4 (IV), 9 (IX), 40 (XL), 90 (XC), 400 (CD) and 900 (CM).
Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. 
You cannot append 5 (V), 50 (L), or 500 (D) multiple times. If you need to append a symbol 4 times use the subtractive form.
Given an integer, convert it to a Roman numeral.


Example 1:

Input: num = 3749

Output: "MMMDCCXLIX"

Explanation:

3000 = MMM as 1000 (M) + 1000 (M) + 1000 (M)
 700 = DCC as 500 (D) + 100 (C) + 100 (C)
  40 = XL as 10 (X) less of 50 (L)
   9 = IX as 1 (I) less of 10 (X)
Note: 49 is not 1 (I) less of 50 (L) because the conversion is based on decimal places
Example 2:

Input: num = 58

Output: "LVIII"

Explanation:

50 = L
 8 = VIII
Example 3:

Input: num = 1994

Output: "MCMXCIV"

Explanation:

1000 = M
 900 = CM
  90 = XC
   4 = IV
 

Constraints:

1 <= num <= 3999



********************Approach-1***********************
public class Solution {
    static Map<Integer, String> map = new HashMap<>();
    static {
        map.putAll(Map.of(1, "I", 4, "IV", 5, "V", 9, "IX", 10, "X"));
        map.putAll(Map.of(40, "XL", 50, "L", 90, "XC", 100, "C"));
        map.putAll(Map.of(400, "CD", 500, "D", 900, "CM", 1000, "M"));
    }
    public static String intToRoman(int num) {
        int largestKey = 0;
        for (int key : map.keySet()) {
            if (key <= num && key > largestKey) {
                largestKey = key;
            }
        }
        return map.get(largestKey) + (num - largestKey > 0 ? intToRoman(num - largestKey) : "");
    }
}


*****************Approach-2***************
class Solution 
{
    public String intToRoman(int num) 
    {
        String thou[]={"","M","MM","MMM"};
        String hund[]={"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        String ten[]={"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        String unit[]={"","I","II","III","IV","V","VI","VII","VIII","IX"};
        
//Finding the digits in the thousand, hundred, ten and units place/
int th=num/1000;
int h=(num/100)%10;
int t=(num/10)%10;
int u=num%10;
 
       String v=thou[th]+hund[h]+ten[t]+unit[u];
  System.out.println("Roman Equivalent= "+thou[th]+hund[h]+ten[t]+unit[u]);
        
        return v;

    }
}
