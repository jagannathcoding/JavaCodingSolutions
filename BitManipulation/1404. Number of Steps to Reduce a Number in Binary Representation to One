1404. Number of Steps to Reduce a Number in Binary Representation to One

https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/

Solved
Medium
Topics
Companies
Hint
Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:

If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It is guaranteed that you can always reach one for all test cases.

 

Example 1:

Input: s = "1101"
Output: 6
Explanation: "1101" corressponds to number 13 in their decimal representation.
Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.
Step 3) 7 is odd, add 1 and obtain 8.
Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  
Example 2:

Input: s = "10"
Output: 1
Explanation: "10" corressponds to number 2 in their decimal representation.
Step 1) 2 is even, divide by 2 and obtain 1.  
Example 3:

Input: s = "1"
Output: 0
 

Constraints:

1 <= s.length <= 500
s consists of characters '0' or '1'
s[0] == '1'

**************Approach -1 *********************
class Solution {
    void addOne(StringBuilder s)
    {
        int i=s.length()-1;
        while(i>=0&&s.charAt(i)=='1')
        {
            s.setCharAt(i,'0');
            i--;
        }
        if(i<0)s.insert(0,'1');
        else s.setCharAt(i,'1');
    }
    public int numSteps(String s) 
    {
        int op=0;
        StringBuilder sb=new StringBuilder(s);
        while(sb.length()>1)
        {
            int l=sb.length();
            if(sb.charAt(l-1)=='0')sb.setLength(l-1);
            else addOne(sb);

            op++;
        }
        return op;
    }
}
///tc:o(n^2)
//sc:o(n)

*********************Approach -2****************
class Solution {
    public int numSteps(String s) {
        int l=s.length();
        int operation=0;
        int carry=0;
        for(int i=l-1;i>=1;i--)
        {
            if(((s.charAt(i)-'0')+carry)%2==1)
            {
                operation+=2;
                carry=1;
            }
            else
            {
                operation+=1;
            }
        }
        return operation+carry;
    }
}
//tc:o(n)
//sc:o(1)
