
861. Score After Flipping Matrix
Solved
Medium
Topics
Companies : Amazon
You are given an m x n binary matrix grid.

A move consists of choosing any row or column and toggling each value in that row or column 
(i.e., changing all 0's to 1's, and all 1's to 0's).

Every row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score after making any number of moves (including zero moves).

 

Example 1:


Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
Example 2:

Input: grid = [[0]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
grid[i][j] is either 0 or 1.




*******************Approach-1*********** (modifying input matrics)
//tc:o(row *col)
//sc:o(1)
class Solution {
    public int matrixScore(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;
        
        //Set first column value in each row 
        for(int i=0;i<row;i++)
        {
           if(grid[i][0]==0)
           {
                for (int j = 0; j < col; j++) 
                {
                        grid[i][j] = 1 - grid[i][j]; // Flipping
                }
            }
        }

        for (int j = 1; j <col; j++) 
        {
            int countZero = 0;
            for (int i = 0; i < row; i++) 
            {
                if (grid[i][j] == 0) 
                {
                    countZero++;
                }
            }
            int countOne = row - countZero;
            if (countZero > countOne) 
            {
                // Flipping that column
                for (int i = 0; i < row; i++)
                {
                    grid[i][j] = 1 - grid[i][j];
                }
            }
        }

        int score = 0;
        for (int i = 0; i < row; i++) 
        {
            for (int j = 0; j < col; j++) 
            {
                int value = grid[i][j] * (int) Math.pow(2, col - j - 1);
                score += value;
            }
        }

        return score;
    }
}


********************Approach-2 without modifying input matrics*********

class Solution {
    public int matrixScore(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;
        
       int score=(int)Math.pow(2,col-1)*row;
       for(int j=1;j<col;j++)
       {
            int  countSameBits = 0;
            for(int i=0;i<row;i++)
            {
                if(grid[i][j]==grid[i][0])countSameBits++;
            }
            int countOnes=countSameBits;
            int countZeroes=row-countOnes;
            int ones = Math.max(countOnes, countZeroes);
             score += (int) Math.pow(2, col - j - 1) * ones;
       }
       return score;
    }
}
//tc:o(row *col)
//sc:o(1)
