1863. Sum of All Subset XOR Totals

https://leetcode.com/problems/sum-of-all-subset-xor-totals/description/

Company: google , facebook

The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.

For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
Given an array nums, return the sum of all XOR totals for every subset of nums. 

Note: Subsets with the same elements should be counted multiple times.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.



Example 1:

Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6
Example 2:

Input: nums = [5,1,6]
Output: 28
Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28
Example 3:

Input: nums = [3,4,5,6,7,8]
Output: 480
Explanation: The sum of all XOR totals for every subset is 480.
 

Constraints:

1 <= nums.length <= 12
1 <= nums[i] <= 20

************
///////Approach -1


class Solution {

    List<List<Integer>> result = new ArrayList<>();

        void solve(int nums[],int index, List<Integer>temp)
        {
            if(index>=nums.length)
            {
                result.add(new ArrayList<>(temp));
                return;
            }
            temp.add(nums[index]);
            solve(nums,index+1,temp);
            temp.remove(temp.size()-1);
            solve(nums,index+1,temp);
        }

    public int subsetXORSum(int[] nums)
    {
        List<Integer>alist=new ArrayList<>();
        solve(nums,0,alist);
        int res=0;
        System.out.print(result);
        for(List<Integer>alist1:result)
        {
            int xor=0;
            for(int num:alist1)
            {
                xor^=num;
            }
            res+=xor;
        }
        return res;
    }
}
/*

//T.C : O(n * 2^n)
//S.C : O(n * 2^n)*/


*****************Approach -2 ************
class Solution {
    int solve(int nums[],int index,int xor)
    {
        if(index==nums.length)
        {
            return xor;
        }
        int includejokhonkorchi=solve(nums,index+1,nums[index]^xor);
        int excludejokhonkorchi=solve(nums,index+1,xor);

        return includejokhonkorchi+excludejokhonkorchi;
    }
    public int subsetXORSum(int[] nums) {
        return solve(nums,0,0);
    }
}
/*
//T.C : O(2^n)
//S.C : O(n)*/


**********Approach-3**********

///////////prothomey shob elements er oporey or operation korchi
/////tarpor left shift korchi result ke l-1 array er length -1 eita puro observation
///////////// 3 er binary 11, 7 er binary 111..... or operation korley ashey...111 tarpor 111 ke left shift korechi arrar er size-1 diye
/// 111<<1    final output 1110 maney 14 in decimal
class Solution {
    public int subsetXORSum(int[] nums) {
        int l=nums.length;
        int res=0;
        for(int i:nums)
        {
            res|=i;
        }
        return res<<l-1;
    }
}
//tc:o(n)
//sc:o(1)
