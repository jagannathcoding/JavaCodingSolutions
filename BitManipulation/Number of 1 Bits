191. Number of 1 Bits
Solved
Easy
Topics
Companies
Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:

Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
 

Example 1:

Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
Example 2:

Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
Example 3:

Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.
 

Constraints:
public class Solution 
{
    // n ke unsigned value hishebe dekchi
    public int hammingWeight(int n) 
    {
        int count=0;
         while (n != 0) 
         {
            n=n&(n - 1); // Clears the least significant bit set to 1
            count++;
        }
        return count;
    }
}
/*
eitakey  Brian Kernighan's Algorithm:
Initialize a count variable to 0.
Iterate through each bit of the number using the following steps:
If the current bit is 1, increment the count.
Set the current bit to 0 using the expression n = n & (n - 1).
The count variable now holds the number of 1 bits.
Complexity
Time Complexity: O(k), where k is the number of set bits in the binary representation of the number.
Space Complexity: O(1)


 n =  9 (1001)
   count = 0

   Since 9 > 0, subtract by 1 and do bitwise & with (9-1)
   n = 9&8  (1001 & 1000)
   n = 8
   count  = 1

   Since 8 > 0, subtract by 1 and do bitwise & with (8-1)
   n = 8&7  (1000 & 0111)
   n = 0
   count = 2

   Since n = 0, return count which is 2 now.



*/














